package environment;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Observable;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import game.GameElement;
import game.Goal;
import game.Killer;
import game.Obstacle;
import game.ObstacleMover;
import game.Snake;
import server.Server;
import game.AutomaticSnake;

public class LocalBoard extends Board{
	
	private static final int NUM_SNAKES = 6;
	private static final int NUM_OBSTACLES = 25;
	private static final int NUM_SIMULTANEOUS_MOVING_OBSTACLES = 3;
	private Goal goal;
    private transient ExecutorService obstacleThreadPool;
    private List<Obstacle> obstacles;
    private List<Obstacle> activeObstacles;
    private List<Obstacle> inactiveObstacles;
    private static final int OBSTACLE_CHANGE_INTERVAL = 5000;
	public Lock lock = new ReentrantLock();
	 private CyclicBarrier barrier;
	Thread[] threads = new Thread[NUM_SNAKES];
	
	public LocalBoard() {	
		
		 super();
	        barrier = new CyclicBarrier(NUM_SIMULTANEOUS_MOVING_OBSTACLES, new Runnable() {
	            @Override
	            public void run() {
	                
	                createKiller();
	            }
	        });

		goal = addGoal();
		
        for (int i = 0; i < NUM_SNAKES; i++) {
            AutomaticSnake snake = new AutomaticSnake(i, this);
            snakes.add(snake);
        }

        obstacles = new ArrayList<>();
        activeObstacles = new ArrayList<>();
        inactiveObstacles = new ArrayList<>();

        obstacleThreadPool = Executors.newFixedThreadPool(NUM_SIMULTANEOUS_MOVING_OBSTACLES);

        for (int i = 0; i < NUM_OBSTACLES; i++) {
            Obstacle obstacle = new Obstacle(this);  
            ObstacleMover obstacleMover = new ObstacleMover(obstacle, this,barrier);
            obstacleThreadPool.submit(obstacleMover);
            obstacles.add(obstacle);
            inactiveObstacles.add(obstacle);
        }

        Executors.newSingleThreadExecutor().submit(() -> {
            while (true) {
                try {
                    Thread.sleep(OBSTACLE_CHANGE_INTERVAL);
                    changeObstacles();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

	}

	private void changeObstacles() throws InterruptedException {
        lock.lock();
        try {
            obstacleThreadPool.shutdown();
            obstacleThreadPool.awaitTermination(Long.MAX_VALUE, java.util.concurrent.TimeUnit.NANOSECONDS); 
            obstacleThreadPool = Executors.newFixedThreadPool(NUM_SIMULTANEOUS_MOVING_OBSTACLES); 

        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
	
	 private Killer createKiller() {
	        BoardPosition position = getRandomPosition();
	        if (!getCell(position).isOcupied()) {
	            Killer killer = new Killer();
	            getCell(position).setGameElement(killer);
	            setChanged();
	            return killer;
	        }
	        return null; 
	    }
	 
	 public void init() {
	        
	       
		
	       
	        for (Snake s : snakes) {
	            s.start();
	        }
	        setChanged();
	    }

	
	
	public void removeSnake(BoardPosition position) {
//		TODO
	}



	// Ignore these methods: only for remote players, which are not present in this project
	@Override
	public void handleKeyPress(int keyCode) {
		// do nothing... No keys relevant in local game
	}

	@Override
	public void handleKeyRelease() {
		// do nothing... No keys relevant in local game
	}

	

}
